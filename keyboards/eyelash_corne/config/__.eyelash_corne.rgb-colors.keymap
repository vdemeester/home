#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
/* #include <dt-bindings/zmk/pointing.h> */
/* #include <dt-bindings/zmk/pointing.h> */

#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/rgb_colors.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

/*
    0   1   2   3   4   5        6       7   8   9  10  11 12
    13  14  15 16  17  18    19  20  21  22  23  24 25  26 27
    28  29  30 31  32  33  34    35      36  37  38  39 40 41
               42  43  44                45 46 47
*/

#define RM0 22
#define RM1 23
#define RM2 24
#define RM3 25
#define LT5 0
#define LM4 14
#define RT5 12
#define RM4 26


#define KEYS_L                                                                 \
  0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33  // left hand
#define KEYS_R                                                                 \
  7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 // right hand

#define LH0 42
#define LH1 43
#define LH2 44
#define RH0 47
#define RH1 46
#define RH2 45
#define COMBO_CAPS_1 LH2
#define COMBO_CAPS_2 RH2
#define THUMBS 42 43 44 45 46 47 // thumbs on 36+ keys

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define QUICK_TAP_MS 200
#define TAPPING_TERM_MS 200
#define IDLE_MS 125

// Layers "alias"
#define L_QWT 0
#define L_NUM 1
#define L_SYM 2
#define L_NAV 3
#define L_MED 4
// L_FUN (F1, …)

// Hyper functions
#define LEFT_HYPER LS(LA(LC(LGUI)))
#define RIGHT_HYPER RS(RA(RC(RGUI)))
#define LH(keycode)            LS(LA(LC(LG(keycode))))
#define RH(keycode)            RS(RA(RC(RG(keycode))))

// Bépo key
#define BP1 LS(N1)
#define BP2 LS(N2)
#define BP3 LS(N3)
#define BP4 LS(N4)
#define BP5 LS(N5)
#define BP6 LS(N6)
#define BP7 LS(N7)
#define BP8 LS(N8)
#define BP9 LS(N9)
#define BP0 LS(N0)

&led_strip {
  chain-length = <21>;
};

/ {
    underglow-layer {
    compatible = "zmk,underglow-layer";
    default_layer {
      bindings = <
&ug ___     &ug PURPLE           &ug ___           &ug ___             &ug ___        &ug ___                               &ug ___                &ug ORANGE        &ug ___        &ug ___              &ug ___            &ug ___       &ug ___
&ug ___ &ug ___  &ug ___  &ug ___  &ug ___  &ug ___                     &ug ___  &ug ___  &ug ___  &ug ___        &ug ___  &ug ___  &ug ___  &ug ___  &ug ___
	      &ug RED   &ug GREEN           &ug ___           &ug WHITE             &ug ___        &ug ___        &ug ___              &ug ___              &ug ___        &ug ___        &ug ___          &ug ___          &ug ___                 &ug ___
                                            &ug BLUE          &ug BLUE        &ug BLUE                                               &ug BLUE  &ug BLUE        &ug BLUE
            >;
      layer-id = <L_QWT>;
    };
  };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <IDLE_MS>;
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>; 
            hold-trigger-key-positions = <KEYS_R THUMBS>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <IDLE_MS>;
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>; 
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    rgb_bri_encoder: rgb_bri_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };
    rgb_hue_encoder: rgb_hue_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
    };
    rgb_sat_encoder: rgb_sat_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_SAI>, <&rgb_ug RGB_SAD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB     &kp Q           &kp W           &kp E             &kp R        &kp T                               &kp UP                &kp Y        &kp U        &kp I              &kp O            &kp P       &kp LBKT
&kp EQUAL &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G                     &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &hmr RCTRL J  &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
	      &kp GRAVE   &kp Z           &kp X           &kp C             &kp V        &kp B        &kp SPACE              &kp DOWN              &kp N        &kp M        &kp COMMA          &kp DOT          &kp FSLH                 &kp RBKT
                                            &lt 2 DEL          &lt 2 SPACE        &lt 3 BSPC                                               &kp LEFT_SHIFT  &lt 1 ENTER        &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
	      &trans  &kp BP1           &kp BP2          &kp BP3        &kp BP4        &kp BP5                                         &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
	      &trans  &kp BP6   &kp BP7    &kp BP8  &kp BP9  &kp BP0                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                         &trans        &trans        &trans                                                                          &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&rgb_hue_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&rgb_sat_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &bt BT_CLR_ALL      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};

// 	      &trans  &kb BP6   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
