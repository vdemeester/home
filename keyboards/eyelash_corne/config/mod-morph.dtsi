#define SAPOS  LS(COMMA)        // '
#define DAPOS  LS(DOT)          // "

#define EACUT  &fr_e_acute      // é/É
#define EGRAV  &fr_e_grave      // è/È
#define AGRAV  &fr_a_grave      // à/À

#define ACC_CI LBKT             // ^

ZMK_UNICODE_SINGLE(three_dot, N2, N0, N2, N6) // … U+2026

// tap: minus | shift + tap: question mark
ZMK_MOD_MORPH(min_qma,
    bindings = <&kp MINUS>, <&kp QMARK>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: comma | shift + tab: semicolon
ZMK_MOD_MORPH(com_smc,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
  
// tap: period | shift + tap: colon
ZMK_MOD_MORPH(dot_col,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// Bépo morphs

// tap: quote (') | shift + tab: question mark
ZMK_MOD_MORPH(sqt_qma,
    bindings = <&kp SQT>, <&kp QMARK>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: period | shift + tap : colon | right_alt + tap: …
/* ZMK_MOD_MORPH(col_3p,
 *     bindings = <&kp COL>, <three_dot>;
 *     mods = <MOD_RALT>;
 * )
 * ZMK_MOD_MORPH(dot_col_p,
 *     bindings = <&kp DOT>, <&col_3p>;
 *     mods = <(MOD_LSFT|MOD_RSFT|MOD_RALT)>;
 *     keep-mods = <MOD_RALT>;
 * ) */

// tap: ACC_CI (^) | shift + tap: EXCLAMATION (!)
ZMK_MOD_MORPH(car_excl,
    bindings = <&kp CARET>, <&kp EXCLAMATION>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)



/*
Local Variables:
mode: c
End:
*/
